PROBLEM STATEMENT

There is a country named 'Not A then B' with n cities(numbered 1 to n) and n-1 bidirectional roads. Each city can be visited from a given city and this path is unique, i.e the given graph is a tree. Now you also will be given index of two cities A and B (A != B), we are not allowed to select pairs of cities (X,Y) such that while going from X to Y we see A first and B later on the path. You need to count total pairs of cities (X,Y) such that while travelling from X to Y you do not visit A first and B later in the path. (Note: (X,Y) and (Y,X) is considered different. )

Input Format: First line has three integers n (number of cities), A and B.

Next (n-1) lines contain two integers u and v which means there exists a bidirectional path between u and v.

Constraints: 2 <= n <= 210^5 A, B <= n and A != B u, v <= n and u != v

Output Print an integer representing the total number of pairs (X,Y) such that on travelling from X to Y, B is not visited after A gets visited.

Sample Input and Explanation

Input:

3 2 3

1 2

1 3

Output :

5

The pairs that are allowed are

(1,2) as cities that are on path is 1->2

(1,3) as cities that are on path is 1->3

(2,1) as cities that are on path is 2->1

(3,1) as cities that are on path is 3->1

(3,2) as cities that are on path is 3->1->2 (look here 3 i.e B is visited first and then 2 i.e A is visited later)

So, total pairs are 5.

(2,3) is not allowed as path has 2->1->3. i.e 2 (A) gets visited before 3 (B)

Problem Editorial

The total numbers of pairs in the tree is n X (n-1) and out of these pairs we need to eliminate those pairs (u,v) in which on traversal from u to v we see B after we see A. How can we calculate such pairs. If we make B as the tree's root and then upon doing dfs calculate the size of every subtree. How will it help? If we look carefully then in all the pairs that we cannot choose, the u belongs to a subtree of A (say size of this subtree is sz1) and v belongs to subtree of B which is not in the subtree os a node P where P is a direct child (neighbour) of B and is closest to A (say size of this subtree is sz2, where sz2 can be calculated as size of subtree B - size of subtree P).

So, total number of such pairs that we cannot choose = size_of_subtree_A X (size_of_subtree_B - size_of_subtree_P) {P is a direct child of B closest to A}

So, total numbers of pairs that we can select = total pairs - pairs that we cannot take = n X (n-1) - { (size_of_subtree_A) X (size_of_subtree_B - size_of_subtree_P) }

Problem Solution : 

#include <bits/stdc++.h>
#define int long long
using namespace std;
const int MAX = 3e5 + 9;
vector<int> g[MAX], sz(MAX, 1), par(MAX, 0);
void dfs(int u, int pa) {
   for (int v : g[u]) {
      if (v != pa) {
         par[v] = u;
         dfs(v, u);
         sz[u] += sz[v];
      }
   }
}
signed main() {
   int n, a, b;
   cin >> n >> a >> b;
   for (int i = 0; i < n - 1; i++) {
      int u1, u2;
      cin >> u1 >> u2;
      g[u1].push_back(u2), g[u2].push_back(u1);
   }
   int res = n * (n - 1);
   dfs(b, 0);
   int p = a;
   while (par[p] != b) {
      p = par[p];
   }
   res = res - sz[a] * (sz[b] - sz[p]);
   cout << res << "\n";
}